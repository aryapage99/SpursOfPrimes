# -*- coding: utf-8 -*-
"""primes_lines.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ucOq9O1KX_EvqDifYYbVxtuuWchnpptv
"""

import matplotlib.pyplot as plt
import numpy as np

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def generate_semiprimes(limit):
    semiprimes = []
    for i in range(4, limit + 1):
        factors = []
        for j in range(2, i // 2 + 1):
            if i % j == 0 and is_prime(j) and is_prime(i // j):
                factors.append(j)
                factors.append(i // j)
                # LOL
                break  # We only need two factors
        if len(factors) == 2:  # We only consider numbers with exactly 2 prime factors
            quotient1 = factors[0] / factors[1]
            quotient2 = factors[1] / factors[0]
            semiprimes.append((i, factors, quotient1, quotient2))
    return semiprimes

def main():
    limit = 10000  # You can adjust this limit to generate semiprimes up to a different value
    semiprimes = generate_semiprimes(limit)

    semiprime_numbers = [sp[0] for sp in semiprimes]
    factor1 = [sp[1][0] for sp in semiprimes]
    factor2 = [sp[1][1] for sp in semiprimes]
    quotients1 = [sp[2] for sp in semiprimes]  # factor[0]/factor[1]
    quotients2 = [sp[3] for sp in semiprimes]  # factor[1]/factor[0]

    # Perform linear fit for the lower bound of factor[0]/factor[1]
    linear_fit_coefficients = np.polyfit(semiprime_numbers, quotients1, 1)
    linear_fitted_values = np.polyval(linear_fit_coefficients, semiprime_numbers)

    # Perform linear fit for the upper bound of factor[0]/factor[1]
    # The upper bound is represented by a square root function
    sqrt_fit_coefficients = np.polyfit(semiprime_numbers, np.sqrt(factor1), 1)
    sqrt_fitted_values = np.polyval(sqrt_fit_coefficients, semiprime_numbers)

    # Plotting the first line chart: factor[0]/factor[1] with linear fit
    plt.figure(figsize=(10, 6))
    plt.plot(semiprime_numbers, quotients1, label="factor[0] / factor[1]", marker='o', markersize=5, linestyle='-')
    plt.plot(semiprime_numbers, linear_fitted_values, label="Linear Fit", linestyle='--')
    plt.xlabel("Semiprime Numbers")
    plt.ylabel("Quotient of Factors")
    plt.title("Quotients of Semiprime Factors (factor[0] / factor[1]) with Linear Fit")
    plt.grid(True)
    plt.legend()
    plt.show()

    # Plotting the second line chart: factor[1]/factor[0]
    plt.figure(figsize=(10, 6))
    plt.plot(semiprime_numbers, quotients2, label="factor[1] / factor[0]", marker='x', markersize=5, linestyle='-')
    plt.xlabel("Semiprime Numbers")
    plt.ylabel("Quotient of Factors")
    plt.title("Quotients of Semiprime Factors (factor[1] / factor[0])")
    plt.grid(True)
    plt.legend()
    plt.show()

    # Plotting the second scatter plot: factor[1]
    plt.figure(figsize=(10, 6))
    plt.scatter(semiprime_numbers, factor2, label="factor[1]", s=30)
    plt.xlabel("Semiprime Numbers")
    plt.ylabel("Factor 1")
    plt.title("Factors of Semiprimes (factor[1])")
    plt.grid(True)
    plt.legend()
    plt.show()

    # Plotting the third line chart with running minimum of factor[0]/factor[1]
    min_quotient1 = np.inf
    min_quotient1 = np.inf
    running_min = []
    for q in quotients1:
        min_quotient1 = min(min_quotient1, q)
        running_min.append(min_quotient1)


    plt.figure(figsize=(10, 6))
    plt.plot(semiprime_numbers, quotients1, label="factor[0] / factor[1]", marker='o', markersize=5, linestyle='-')
    plt.plot(semiprime_numbers, running_min, label="Running Min", linestyle='-', color='red')
    plt.xlabel("Semiprime Numbers")
    plt.ylabel("Quotient of Factors")
    plt.title("Quotients of Semiprime Factors (factor[0] / factor[1]) with Running Min")
    plt.grid(True)
    plt.legend()
    plt.show()

    # Plotting the fourth line chart with running maximum of factor[1]/factor[0]
    max_quotient2 = 0
    running_max = []
    for q in quotients2:
        max_quotient2 = max(max_quotient2, q)
        running_max.append(max_quotient2)

    plt.figure(figsize=(10, 6))
    plt.plot(semiprime_numbers, quotients2, label="factor[1] / factor[0]", marker='x', markersize=5, linestyle='-')
    plt.plot(semiprime_numbers, running_max, label="Running Max", linestyle='-', color='red')
    plt.xlabel("Semiprime Numbers")
    plt.ylabel("Quotient of Factors")
    plt.title("Quotients of Semiprime Factors (factor[1] / factor[0]) with Running Max")
    plt.grid(True)
    plt.legend()
    plt.show()

    # Plotting the fifth line chart with square root approximation of factor[0]
    plt.figure(figsize=(10, 6))
    plt.plot(semiprime_numbers, np.sqrt(factor1), label="sqrt(factor[0])", linestyle='-', color='red')
    plt.xlabel("Semiprime Numbers")
    plt.ylabel("Square Root of Factor 0")
    plt.title("Square Root Approximation of factor[0]")
    plt.grid(True)
    plt.legend()
    plt.show()

    # Plotting the sixth line chart: factor[0]/factor[1] with linear fit and sqrt(factor[0]) upper bound
    plt.figure(figsize=(10, 6))
    plt.plot(semiprime_numbers, quotients1, label="factor[0] / factor[1]", marker='o', markersize=5, linestyle='-')
    plt.plot(semiprime_numbers, linear_fitted_values, label="Linear Fit", linestyle='--')
    plt.plot(semiprime_numbers, sqrt_fitted_values, label="sqrt(factor[0]) Upper Bound", linestyle='--', color='red')
    plt.xlabel("Semiprime Numbers")
    plt.ylabel("Quotient of Factors")
    plt.title("Quotients of Semiprime Factors (factor[0] / factor[1]) with Linear Fit and sqrt(factor[0]) Upper Bound")
    plt.grid(True)
    plt.legend()
    plt.show()

if __name__ == "__main__":
    main()