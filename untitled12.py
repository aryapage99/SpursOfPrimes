# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NUFbBQ0qnUT2wZwVnulvBEKhsb6XXZl0
"""

import sympy
import matplotlib.pyplot as plt

def twin_prime_distance(i):
    """
    Find the distance between the ith twin prime and the next twin prime.
    """
    twin_primes = []
    count = 0
    n = 2  # Start checking from the first prime (2)

    while count < i + 2:  # Find the (i+2)-th twin prime
        if sympy.isprime(n) and sympy.isprime(n + 2):
            twin_primes.append(n)
            count += 1
        n += 1

    distance = twin_primes[i + 1] - twin_primes[i]
    return distance

# Define the range of twin primes you want to analyze (e.g., the first 100 twin primes)
num_twin_primes = 1000
twin_prime_gaps = []

for i in range(num_twin_primes - 1):
    gap = twin_prime_distance(i)
    twin_prime_gaps.append(gap)

# Create a plot
plt.figure(figsize=(10, 6))
plt.plot(range(1, num_twin_primes), twin_prime_gaps, marker='o', linestyle='-')
plt.xlabel('Twin Prime Gap Index (i)')
plt.ylabel('Gap Size')
plt.title(f'Distance Between ith and Next Twin Prime for i = 1 to {num_twin_primes - 1}')
plt.grid(True)
plt.show()