# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E5Vw4FkR-i9CvcXLWAi5bfsmYKwX159V
"""

import sympy
import numpy as np
import plotly.express as px
import plotly.graph_objects as go

def prime_factors(n):
    """
    Get the prime factors of a number 'n'.
    """
    factors = sympy.factorint(n)
    return factors

def is_semiprime(n):
    """
    Check if 'n' is a semiprime (the product of exactly two prime factors).
    """
    factors = prime_factors(n)
    return len(factors) == 2

def smaller_prime_ratio(n):
    """
    Calculate the smaller prime factor ratio for a semiprime 'n'.
    """
    factors = prime_factors(n)
    prime_factors_list = list(factors.keys())
    if len(prime_factors_list) == 2:
        return min(prime_factors_list) / max(prime_factors_list)
    return None

# Define the range of numbers you want to analyze
start = 1
end = 100000

semiprime_numbers = []
ratios = []

for num in range(start, end + 1):
    if is_semiprime(num):
        ratio = smaller_prime_ratio(num)
        if ratio is not None:
            semiprime_numbers.append(num)
            ratios.append(ratio)

# Convert to spherical coordinates
angles = [2 * np.pi * ratio for ratio in ratios]
radius = semiprime_numbers

# Convert to Cartesian coordinates
x = radius * np.sin(angles)
y = radius * np.cos(angles)
z = np.zeros_like(x)

# Create an interactive 3D scatter plot for smaller ratio vs. semiprime numbers
fig1 = go.Figure(data=[go.Scatter3d(x=x, y=y, z=z, mode='markers', marker=dict(size=5))])

# Customize the plot
fig1.update_layout(scene=dict(aspectmode="cube"))
fig1.update_layout(scene=dict(camera=dict(up=dict(x=0, y=0, z=1), center=dict(x=0, y=0, z=0), eye=dict(x=1, y=1, z=1))))
fig1.update_layout(title='Smaller Prime Factor Ratio of Semiprime Numbers in Spherical Coordinates')

# Create a 3D scatter plot for smaller ratio vs. numbers (as numbers get larger)
x2 = semiprime_numbers
y2 = ratios
z2 = np.zeros_like(x2)

fig2 = go.Figure(data=[go.Scatter3d(x=x2, y=y2, z=z2, mode='markers', marker=dict(size=5))])

# Customize the plot
fig2.update_layout(scene=dict(aspectmode="cube"))
fig2.update_layout(scene=dict(camera=dict(up=dict(x=0, y=0, z=1), center=dict(x=0, y=0, z=0), eye=dict(x=1, y=1, z=1))))
fig2.update_layout(title='Smaller Prime Factor Ratio vs. Numbers (As Numbers Get Larger)')

# Create a 3D scatter plot for smaller ratio vs. numbers with Z sign (odd/even)
x3 = semiprime_numbers
y3 = ratios
z3 = [-1 if num % 2 != 0 else 1 for num in x3]  # -z for odd, +z for even

fig3 = go.Figure(data=[go.Scatter3d(x=x3, y=y3, z=z3, mode='markers', marker=dict(size=5))])

# Customize the plot
fig3.update_layout(scene=dict(aspectmode="cube"))
fig3.update_layout(scene=dict(camera=dict(up=dict(x=0, y=0, z=1), center=dict(x=0, y=0, z=0), eye=dict(x=1, y=1, z=1))))
fig3.update_layout(title='Smaller Prime Factor Ratio vs. Numbers with Z Sign (Odd/Even)')

# Show all three interactive plots side by side
fig1.show()
fig2.show()
fig3.show()