# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lJI53RIwrqCJg0LuNfDcU6VLCKS0ClRP
"""

import random
import math
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit

def prime_factors(n):
    number = n
    factors = []
    for i in range(2, int(math.sqrt(number)) + 1):
        while number % i == 0:
            factors.append(i)
            number //= i
    if number > 1:  # Add the remaining factor if n is a prime number itself
        factors.append(number)
    return factors

def is_semiprime(number):

    if number <= 1:
        return False
    factors = prime_factors(number)
    return len(set(factors)) == 2  # Check if there are only two unique factors

def generate_semiprimes(start_number, end_number):

    semiprimes = []
    for number in range(start_number, end_number + 1):
        if is_semiprime(number):
            semiprimes.append(number)
    return semiprimes

def main():
    start_number = 0# int(input("Enter the starting semiprime: "))
    end_number = 1000# int(input("Enter the ending semiprime: "))
    semiprimes = generate_semiprimes(start_number, end_number)
    semiprimes.sort()

    # Generate a dictionary to store semiprime numbers based on quotients
    quotients = {}
    for semiprime in semiprimes:
        factors = prime_factors(semiprime)
        if len(factors) == 1:  # Handle case where a factor is 1 (single prime)
            quotient = 1  # Set quotient to 1 for consistency
        else:
            quotient = factors[0] / factors[1]
        if quotient not in quotients:
            quotients[quotient] = []
        quotients[quotient].append(semiprime)

    # Generate the plot
    if quotients:
        plt.figure()
        for quotient, semiprime_list in quotients.items():
            plt.plot(semiprime_list, [quotient] * len(semiprime_list), 'b-', label=f"Quotient: {quotient:.2f}")
        plt.xlabel('Semiprime Numbers')
        plt.ylabel('Quotient of Prime Factors')
        plt.title('Semiprime Numbers vs. Quotient of Prime Factors')
        plt.grid(True)
        #plt.legend()
        plt.show()

if __name__ == "__main__":
    main()

