# -*- coding: utf-8 -*-
"""primed7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wgeiiSbo7yZnMhg7eFqkFcZEEP-PXG2q
"""

import random
import math
import matplotlib.pyplot as plt

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number ** 0.5) + 1):
        if number % i == 0:
            return False
    return True

def generate_semiprimes(start_number, end_number):
    semiprimes = []
    for i in range(start_number, end_number + 1):
        for j in range(2, int(math.sqrt(i)) + 1):
            if is_prime(i) and is_prime(j) and i * j <= end_number:
                semiprimes.append(i * j)
    return semiprimes

def prime_factors(number):
    factors = []
    for i in range(2, number + 1):
        if number % i == 0 and is_prime(i):
            factors.append(i)
    return factors

def get_number_of_digits(number):
    return len(str(number))

def smaller_fraction(factors):
    smaller, larger = min(factors), max(factors)
    return smaller / larger


def main():
    start_number = int(input("Enter the starting semiprime: "))
    end_number = int(input("Enter the ending semiprime: "))
    semiprimes = generate_semiprimes(start_number, end_number)
    semiprimes.sort()

    # Separate even and odd semiprimes
    even_semiprimes = [semiprime for semiprime in semiprimes if semiprime % 2 == 0]
    odd_semiprimes = [semiprime for semiprime in semiprimes if semiprime % 2 != 0]

    # Generate a dictionary to store semiprime numbers based on their smaller fraction
    even_smaller_fractions = {}  # smaller fraction for even semiprimes
    odd_smaller_fractions = {}   # smaller fraction for odd semiprimes

    for semiprime in even_semiprimes:
        factors = prime_factors(semiprime)
        smaller_fraction_value = smaller_fraction(factors)

        if smaller_fraction_value not in even_smaller_fractions:
            even_smaller_fractions[smaller_fraction_value] = []
        even_smaller_fractions[smaller_fraction_value].append(semiprime)

    for semiprime in odd_semiprimes:
        factors = prime_factors(semiprime)
        smaller_fraction_value = smaller_fraction(factors)

        if smaller_fraction_value not in odd_smaller_fractions:
            odd_smaller_fractions[smaller_fraction_value] = []
        odd_smaller_fractions[smaller_fraction_value].append(semiprime)

    # Generate the scatter plot for even semiprimes (factors[0]/factors[1])
    plt.figure()
    for fraction, semiprime_list in even_smaller_fractions.items():
        semiprime_list.sort()  # Sort semiprimes for better visualization
        plt.scatter(semiprime_list, [fraction] * len(semiprime_list), color='blue', label=f"Smaller Fraction: {fraction:.2f}")
    plt.xlabel('Even Semiprime Numbers')
    plt.ylabel('Smaller Fraction (smaller factor / larger factor)')
    plt.title('Even Semiprime Numbers vs. Smaller Fraction (smaller factor / larger factor)')
    plt.grid(True)
  #  plt.legend()
    plt.show()

    # Generate the scatter plot for odd semiprimes (factors[1]/factors[0])
    plt.figure()
    for fraction, semiprime_list in odd_smaller_fractions.items():
        semiprime_list.sort()  # Sort semiprimes for better visualization
        plt.scatter(semiprime_list, [fraction] * len(semiprime_list), color='blue', label=f"Smaller Fraction: {fraction:.2f}")
    plt.xlabel('Odd Semiprime Numbers')
    plt.ylabel('Smaller Fraction (smaller factor / larger factor)')
    plt.title('Odd Semiprime Numbers vs. Smaller Fraction (smaller factor / larger factor)')
    plt.grid(True)
  #  plt.legend()
    plt.show()

    # similar modifications for line charts
    plt.figure()
    for fraction, semiprime_list in even_smaller_fractions.items():
        semiprime_list.sort()  # Sort semiprimes for better visualization
        plt.plot(semiprime_list, [fraction] * len(semiprime_list), 'bo', label=f"Smaller Fraction: {fraction:.2f}")
    plt.xlabel('Even Semiprime Numbers')
    plt.ylabel('Smaller Fraction (smaller factor / larger factor)')
    plt.title('Even Semiprime Numbers vs. Smaller Fraction (smaller factor / larger factor)')
    plt.grid(True)
   # plt.legend()
    plt.show()

    # Generate the line chart for odd semiprimes (smaller factor / larger factor)
    plt.figure()
    for fraction, semiprime_list in odd_smaller_fractions.items():
        semiprime_list.sort()  # Sort semiprimes for better visualization
        plt.plot(semiprime_list, [fraction] * len(semiprime_list), 'bo', label=f"Smaller Fraction: {fraction:.2f}")
    plt.xlabel('Odd Semiprime Numbers')
    plt.ylabel('Smaller Fraction (smaller factor / larger factor)')
    plt.title('Odd Semiprime Numbers vs. Smaller Fraction (smaller factor / larger factor)')
    plt.grid(True)
    #plt.legend()
    plt.show()
    plt.figure()
    for fraction, semiprime_list in even_smaller_fractions.items():
        semiprime_list.sort()  # Sort semiprimes for better visualization
        plt.plot(semiprime_list, [fraction] * len(semiprime_list), 'bo-', label=f"Smaller Fraction: {fraction:.2f}")
    plt.xlabel('Even Semiprime Numbers')
    plt.ylabel('Smaller Fraction (smaller factor / larger factor)')
    plt.title('Even Semiprime Numbers vs. Smaller Fraction (smaller factor / larger factor)')
    plt.grid(True)
  #9  plt.legend()
    plt.show()





if __name__ == "__main__":
    main()